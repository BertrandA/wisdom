== Your first Wisdom project

IMPORTANT: Be sure you have a recent version of Maven (3.1.1+).

IMPORTANT: As Wisdom is not yet released in Maven Central, you must install the _bootstrap_ using:
----
 mvn org.apache.maven.plugins:maven-dependency-plugin:get \
  -DrepoUrl=http://oss.sonatype.org/content/repositories/snapshots/ \
  -Dartifact=${project.groupId}:wisdom-maven-plugin:${project.version}
----

=== Create a Wisdom project

Wisdom is based on the http://maven.apache.org[Apache Maven] build tools. However
don't worry,  Wisdom makes it easy. However, first, be sure you have Maven installed.

Once installed, you can create your first Wisdom project by launching:

----
mvn ${project.groupId}:wisdom-maven-plugin:${project.version}:create \
 -DgroupId=YOUR_GROUPID \
 -DartifactId=YOUR_ARTIFACTID \
 -Dversion=1.0-SNAPSHOT \
 -npr
----

TIP: You can also customize the generated +package+ with +-Dpackage=org.acme.wisdom+

Once generated, you can already run your wisdom application. Navigate to the generated folder, and launch:

----
mvn wisdom:wisdom-maven-plugin:run
----

Then, open your browser to: http://localhost:9000.

That's it you have your first Wisdom application.

=== What was generated?

The previous command have generated a set of folders. Following the Maven conventions,
all files are placed in the +src+ directory, while the generated artifacts are in +target+.

The +src/main+ directory is structured as follows:

* +src/main/java+ contains the Java sources of your application
* +src/main/resources+ contains the assets and templates included in your application _package_
* +src/main/configuration+ contains the configuration file (application, runtime, logger...)
* +src/main/assets+ contains assets that are copied to Wisdom but not included in application _package_
* +src/main/templates+ contains assets that are copied to Wisdom but not included in application _package_

The +src/test+ directory contains the tests (unit and integration tests).

=== You first controller

The generated application contains a _controller_. A _controller_ is a Wisdom components containing _actions_,
_i.e._ methods called using HTTP requests.

[source,java]
----
package sample;

import org.wisdom.api.DefaultController;
import org.wisdom.api.annotations.*;
import org.wisdom.api.http.HttpMethod;
import org.wisdom.api.http.Result;

/**
 * Your first Wisdom Controller.
 */
@Controller                                                    // <1>
public class SampleController extends DefaultController {      // <2>

    @Route(method = HttpMethod.GET, uri = "/")                 // <3>
    public Result hello() {
        return ok("hello Wisdom !");                           // <4>
    }
}
----
<1> First, declare the Java class as Wisdom's controller
<2> Extend +DefaultController+ to inherit from the useful method
<3> Specify the HTTP route connected to your action method
<4> The body of your action, returning a +Result+ object

<<<
