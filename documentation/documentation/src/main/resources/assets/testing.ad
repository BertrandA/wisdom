== Testing applications

Wisdom provides everything you need to test your application. More specifically, it supports:

* Unit tests - test your classes and action methods
* In-container integration tests - test your controllers and services on a running server
* Blackbox integration tests - emit HTTP request and check the results
* UI tests - check the web page exposed by your application

To ease the development ot tests, Wisdom provides http://joel-costigliola.github.io/assertj[AssertJ],
http://ow2-chameleon.github.io/osgi-testing-helpers/apidocs/index.html[OSGi Testing Helpers] for in-container tests,
a HTTP fluent API for blackbox tests, and https://github.com/FluentLenium/FluentLenium[FluentLenium] for UI tests.

=== Unit Tests

The unit test support let you write Junit tests to check the behavior of your classes. These tests case are written
in Java classes in the +src/test/java+ folder. Notice that test case classes must starts or ends with `Test` (this is
 a Surefire convention).

Unit tests should extend the +WisdomUnitTest+ class to access utility methods.

[source,java,indent=0]
----
include::{testdir}/unit/UnitTest.java[tags=unit]
----

The first test is a really simple test just checking that 1+1=2. Notice the AssertJ syntax.

The second tests check the behavior of one of your action methods. As your action method can access the HTTP method,
the call is wrapped into an +Invocation+ call:

[source,java,indent=0]
----
Action.ActionResult result = action(new Invocation() {
    @Override
    public Result invoke() throws Throwable {
        return simple.index();
    }
}).invoke();
----

Such pattern let you call your action directly, and retrieve the HTTP result. You can also configure the HTTP
headers, parameters, form attributes, cookies, session.... The chain must end with +invoke()+

[source,java,indent=0]
----
Action.ActionResult result = action(new Invocation() {
    @Override
    public Result invoke() throws Throwable {
        return simple.index();
    }
}).parameter("name", "clement").header("Accept", "text/html").invoke();
----

The `ActionResult` contains the HTTP Context (that may have been modified by your action method, and the HTTP result.

=== In-Container Tests

In-container tests let you check the behavior of your controller and services running in the server. The server is
automatically launched. These tests case are written in Java classes in the +src/test/java+ folder. Notice that test
case classes must starts or ends with "IT" (this is a Surefire/Failsafe convention).

In-container tests must extend +WisdomTest+, and follow the same rules as unit tests. However, `@Inject` annotated
fields are injected.

[source,java,indent=0]
----
include::{testdir}/unit/InContainerIT.java[tags=IT]
----

The `@Inject` annotation let you access the real instance of your controller, service or template:

----
// Controller injection:
@Inject
HelloController controller;

// Service injection:
@Inject
private Validator validator;

// The OSGi bundle context
@Inject
private BundleContext context;
----

Once injected your test can invoke them either directly or in an invocation block to configure the HTTP context.

IMPORTANT: the same server instance is used for all your tests.

=== BlackBox Tests

Black box tests are emitting HTTP requests and retrieving the result. Such tests are not executed in the server. You
application is deployed within the server (it reuses the launched one by in-container tests if it's already running).

As for in-container tests, black box test class must start or end with "IT". These classes must extend
+org.wisdom.test.parents.WisdomBlackBoxTest+.

[source,java,indent=0]
----
include::{testdir}/unit/BlackBoxIT.java[tags=IT]
----

The test API let you emit any type of HTTP requests and configure headers, payload, cookies... In addition, the
response can be smoothly wrapped to Json Node, HTML Document (JSoup), String, or  input stream.

=== FluentLenium Tests

UI Tests are loading pages using a browser and check the elements present on the page. Wisdom uses FluentLenium to
ease the implementation of UI tests.

As for in-container tests, UI test class must start or end with "IT". These classes must extend
+org.wisdom.test.parents.WisdomFluentLeniumTest+.

[source,java,indent=0]
----
include::{testdir}/unit/UIIT.java[tags=IT]
----


=== Stopping the server instance

When building a Maven multi-module project, the same instance of server is used for all your tests. This can be
annoying. Fortunately, Wisdom provides a test listener to stop the instance one the module build is completed:

[source,xml,indent=0]
----
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-failsafe-plugin</artifactId>
<version>2.17</version>
<executions>
    <execution>
        <goals>
            <goal>integration-test</goal>
            <goal>verify</goal>
        </goals>
        <configuration>
            <properties>
                <property>
                    <name>listener</name>
                    <value>org.wisdom.test.WisdomRunListener</value>
                </property>
            </properties>
        </configuration>
    </execution>
</executions>
</plugin>
----

The previous configuration is automatically generated when creating a new project.







