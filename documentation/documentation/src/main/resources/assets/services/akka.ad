== Integrating with Akka

Akka uses the Actor Model to raise the abstraction level and provide a better platform to build correct concurrent
and scalable applications. Actors also provide the abstraction for transparent distribution and the basis for truly
scalable and fault-tolerant applications.

=== Using Akka

From Wisdom 0.8.1+, Akka is available as an extension. In the `pom.xml` file of your project add:

----
<dependency>
    <groupId>org.wisdom-framework</groupId>
    <artifactId>akka-system</artifactId>
    <version>0.8.1-SNAPSHOT</version>
</dependency>
----

=== The application actor system
Akka can work with several containers called `ActorSystems`. An actor system manages the resources it is
configured to use in order to run the actors it contains.

Wisdom defines a special actor system to be used by the applications. You can access the default actor
system using the `org.wisdom.akka.AkkaSystemService` service:

[source, java, indent=0]
----
include::{sourcedir}/controllers/Akka.java[tags=akka]
----

=== Scheduling asynchronous tasks

Once you have retrieved the actor system, you can schedule messages sending to actors and executing
tasks (functions or Runnable instances). You will get a `Cancellable` back that you can call
cancel on to cancel the execution of the scheduled operation.

For example, to send a message to the `testActor` every 30 minutes:

[source, java, indent=0]
----
include::{sourcedir}/controllers/Akka.java[tags=schedule]
----

Alternatively, to run a block of code ten milliseconds from now:

[source, java, indent=0]
----
include::{sourcedir}/controllers/Akka.java[tags=runOnce]
----

